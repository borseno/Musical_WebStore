// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musical_WebStore_BlazorApp.Server.Data;

namespace Musical_WebStore_BlazorApp.Server.Data.Migrations
{
    [DbContext(typeof(MusicalShopIdentityDbContext))]
    [Migration("20191224102630_AddedGoodTesting")]
    partial class AddedGoodTesting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.Star", b =>
                {
                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("InstrumentId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.Testing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Testings");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasDiscriminator<string>("TypeName").HasValue("Instrument");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Amplifier", b =>
                {
                    b.HasBaseType("Musical_WebStore_BlazorApp.Shared.Instrument");

                    b.HasDiscriminator().HasValue("Amplifier");

                    b.HasData(
                        new
                        {
                            Id = -11,
                            Description = "One of the most legendary amps for the fans of heavier tone.",
                            Image = "images/Amplifiers/1.jpg",
                            Price = 400,
                            Quantity = 4,
                            Title = "Peavey 6505",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -12,
                            Description = "A high-end hand-wired tube amp with great style.",
                            Image = "images/Amplifiers/2.jpg",
                            Price = 700,
                            Quantity = 10,
                            Title = "Vox AC4HW1",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -13,
                            Description = "A legendary tone monster designed by Eddie Van Halen.",
                            Image = "images/Amplifiers/3.jpg",
                            Price = 200,
                            Quantity = 3,
                            Title = "EVH 5150III 50W",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -14,
                            Description = "A modern reimagining of the iconic AC15.",
                            Image = "images/Amplifiers/4.jpg",
                            Price = 300,
                            Quantity = 3,
                            Title = "Vox Custom AC15C2",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -15,
                            Description = "Superb flexibility and power from this all-tube combo.",
                            Image = "images/Amplifiers/5.jpg",
                            Price = 300,
                            Quantity = 2,
                            Title = "Blackstar HT Stage 60 MKII",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -16,
                            Description = "A stand-out combo that crushes stage performances.",
                            Image = "images/Amplifiers/6.jpg",
                            Price = 800,
                            Quantity = 3,
                            Title = "Orange Crush Pro CR60C",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -17,
                            Description = "Flexible combo providing legendary Boss tone at an attractive price.",
                            Image = "images/Amplifiers/7.jpg",
                            Price = 500,
                            Quantity = 10,
                            Title = "Boss Katana KTN-100",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -18,
                            Description = "A classic Fender combo amp with great power.",
                            Image = "images/Amplifiers/8.jpg",
                            Price = 100,
                            Quantity = 6,
                            Title = "Fender Champion 100",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -19,
                            Description = "Huge tone and power from this high-end acoustic amp.",
                            Image = "images/Amplifiers/9.jpg",
                            Price = 600,
                            Quantity = 3,
                            Title = "AER Compact 60",
                            TypeName = "Amplifier"
                        },
                        new
                        {
                            Id = -20,
                            Description = "A solid dual-channel choice for street performers.",
                            Image = "images/Amplifiers/10.jpg",
                            Price = 200,
                            Quantity = 8,
                            Title = "Roland Cube Street",
                            TypeName = "Amplifier"
                        });
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Guitar", b =>
                {
                    b.HasBaseType("Musical_WebStore_BlazorApp.Shared.Instrument");

                    b.HasDiscriminator().HasValue("Guitar");

                    b.HasData(
                        new
                        {
                            Id = -21,
                            Description = "Vintage tone and style to spare with this high-end Takamine.",
                            Image = "images/Guitars/1.jpg",
                            Price = 900,
                            Quantity = 7,
                            Title = "Yamaha S1209",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -22,
                            Description = "A gorgeous premium all-solid-wood Taylor.",
                            Image = "images/Guitars/2.jpg",
                            Price = 800,
                            Quantity = 3,
                            Title = "Fender CD60",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -23,
                            Description = "Great looking dreadnaught body guitar from Bristol.",
                            Image = "images/Guitars/3.jpg",
                            Price = 500,
                            Quantity = 10,
                            Title = "Takamine EF360S-TT",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -24,
                            Description = "Classic style with this solid-wood Martin.",
                            Image = "images/Guitars/4.jpg",
                            Price = 100,
                            Quantity = 1,
                            Title = "Taylor 314ce",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -25,
                            Description = "A mid-range performance-focused acoustic with a high-end feel.",
                            Image = "images/Guitars/5.jpg",
                            Price = 700,
                            Quantity = 1,
                            Title = "Blueridge BR-160",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -26,
                            Description = "Beautiful style, quality and playability with this Seagull.",
                            Image = "images/Guitars/6.jpg",
                            Price = 200,
                            Quantity = 1,
                            Title = "Martin 16 Series D-16GT",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -27,
                            Description = "A taste of vintage America with this stylish Chinese guitar.",
                            Image = "images/Guitars/7.jpg",
                            Price = 200,
                            Quantity = 6,
                            Title = "Yamaha A Series A3M",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -28,
                            Description = "Affordable slimline Yamaha with upgraded performance.",
                            Image = "images/Guitars/8.jpg",
                            Price = 700,
                            Quantity = 8,
                            Title = "Seagull S6 Original",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -29,
                            Description = "A proud representative from the Takamine family.",
                            Image = "images/Guitars/9.jpg",
                            Price = 400,
                            Quantity = 4,
                            Title = "The Loar LH-204 Brownstone",
                            TypeName = "Guitar"
                        },
                        new
                        {
                            Id = -30,
                            Description = "FG800 shows what made Yamaha's FG series so legendary to begin with.",
                            Image = "images/Guitars/10.jpg",
                            Price = 1000,
                            Quantity = 9,
                            Title = "Yamaha APX600",
                            TypeName = "Guitar"
                        });
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Shared.Pedal", b =>
                {
                    b.HasBaseType("Musical_WebStore_BlazorApp.Shared.Instrument");

                    b.HasDiscriminator().HasValue("Pedal");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Focused pedal that excels at distortion, overdrive and classic fuzz sounds.",
                            Image = "images/Pedals/1.jpg",
                            Price = 100,
                            Quantity = 7,
                            Title = "MXR Phase 90",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -2,
                            Description = "British tube distortion with outstanding dynamic range.",
                            Image = "images/Pedals/2.jpg",
                            Price = 400,
                            Quantity = 7,
                            Title = "Boss DD-7 Digital",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -3,
                            Description = "Fully analog distortion that brings an impressive range of tones and gain.",
                            Image = "images/Pedals/3.jpg",
                            Price = 300,
                            Quantity = 3,
                            Title = "Ibanez TS808 Tube Screamer",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -4,
                            Description = "Unique features and great tones with an outstanding pedigree.",
                            Image = "images/Pedals/4.jpg",
                            Price = 200,
                            Quantity = 1,
                            Title = "Electro-Harmonix SOULFOOD",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -5,
                            Description = "More refined affordable dist box that brings great performance and limited versatility.",
                            Image = "images/Pedals/5.jpg",
                            Price = 300,
                            Quantity = 4,
                            Title = "Boss CH-1 Stereo",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -6,
                            Description = "A faithful reproduction of the classic Tube Screamer sound.",
                            Image = "images/Pedals/6.jpg",
                            Price = 100,
                            Quantity = 10,
                            Title = "MXR Dyna Comp Effects Pedal",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -7,
                            Description = "Another classic stompbox that brings impressive performance and abundant flexibility.",
                            Image = "images/Pedals/7.jpg",
                            Price = 100,
                            Quantity = 7,
                            Title = "Dunlop The Original Crybaby",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -8,
                            Description = "Very light distortion that caters to Rock, but brings high quality tone.",
                            Image = "images/Pedals/8.jpg",
                            Price = 900,
                            Quantity = 9,
                            Title = "Boss RC-3 Loop Station Pedal",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -9,
                            Description = "Quintessential distortion pedal used both by legendary guitar players and the masses.",
                            Image = "images/Pedals/9.jpg",
                            Price = 900,
                            Quantity = 1,
                            Title = "	Electro-Harmonix LPB-1",
                            TypeName = "Pedal"
                        },
                        new
                        {
                            Id = -10,
                            Description = "One of the best and only Klon Centaur clones on the market.",
                            Image = "images/Pedals/10.jpg",
                            Price = 700,
                            Quantity = 7,
                            Title = "Boss FV-500H",
                            TypeName = "Pedal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.Comment", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Shared.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.Star", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musical_WebStore_BlazorApp.Shared.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musical_WebStore_BlazorApp.Server.Data.Models.Testing", b =>
                {
                    b.HasOne("Musical_WebStore_BlazorApp.Shared.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musical_WebStore_BlazorApp.Server.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
