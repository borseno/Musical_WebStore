@page "/orders"
@using Musical_WebStore_BlazorApp.Shared
@using Microsoft.AspNetCore.Blazor
@using System.IO;
@inject HttpClient client
<h3 class="inst-title">Instruments</h3>

@if (orders == null)
{
    <p><em>Loading orders...</em></p>
}
else
{
    <div class="container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <td>
                        Date
                    </td>
                    <td>
                        Status
                    </td>
                    <td>
                        Items
                    </td>
                    <td>
                        Delivering to
                    </td>
                    <AuthorizeView>
                        <Authorized>
                            @if (context.User.IsInRole("Admin"))
                            {
                                <td>Userid</td>
                                <td>Button</td>
                            }
                        </Authorized>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr>
                        <td>
                            @order.Date
                        </td>
                        <td>
                            @{
                                switch (@order.StatusId)
                                {
                                    case (int)OrderStatuses.InConfirmation:
                                        <text>In confirmation</text>
                                        break;
                                    case (int)OrderStatuses.Confirmed:
                                        <text>Confirmed</text>
                                        break;
                                    case (int)OrderStatuses.OnTheWay:
                                        <text>On The Way</text>
                                        break;
                                    case (int)OrderStatuses.Delivered:
                                        <text>Waiting for you</text>
                                        break;
                                }
                            }
                        </td>
                        <td>
                            @foreach (var item in order.Items)
                            {
                                <div>
                                    <a href="instrument/@item.Instrument.Id">@item.Instrument.Title</a> (@item.Num шт)
                                </div>
                            }
                        </td>
                        <td>
                            @order.Location.Name
                            (@order.Location.Address)
                        </td>
                        <td>
                            @order.UserId
                        </td>
                        <td>
                            @if (order.StatusId == (int)OrderStatuses.InConfirmation)
                            {
                                <button @onclick="async () => await Confirm(order.Id)">Confirm</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    public OrderViewModel[] orders = null;
    protected override async Task OnInitializedAsync()
    {
        orders = await client.GetJsonAsync<OrderViewModel[]>("api/cart/getorders");
    }

    private Task Confirm(int id)
    {
        orders.First(i => i.Id == id).StatusId = (int)OrderStatuses.InConfirmation;

        var action = client.PostJsonAsync("api/cart/confirm", new { id });

        StateHasChanged();

        return action;
    }
}
