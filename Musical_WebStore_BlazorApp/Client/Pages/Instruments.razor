@page "/list"
@page "/list/{Type}"
@using Musical_WebStore_BlazorApp.Shared
@using Microsoft.AspNetCore.Blazor
@using System.IO;
@inject HttpClient client
<h3 class="inst-title">Instruments</h3>

@if (instruments == null)
{
    <p><em>Loading instruments...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            @if (context.User.IsInRole("Admin"))
            {
                <a href="/goodsmanagement/addGood" class="btn btn-primary">Add a good...</a>
            }
        </Authorized>
    </AuthorizeView>
    <EditForm Model="@searchModel" OnValidSubmit="Search">
        <div class="row">
            <label>Search by name:</label>
            <InputText class="form-control" @bind-Value="searchModel.Input" />
        </div>
        <div class="row m-1">
            <label>Price range:</label>
            <div class="col col-1">
                <InputText type="number" class="form-control" @bind-Value="searchModel.MinPrice" />
            </div>
            <label>-</label>
            <div class="col col-1">
                <InputText type="number" min="@searchModel.MinPrice" class="form-control" @bind-Value="searchModel.MaxPrice" />
            </div>
            <label>$</label>
        </div>
        <div class="row">
            <button class="btn btn-primary m-1">Apply filters</button>
        </div>
    </EditForm>

    <div class="card-deck">
        @foreach (var instrument in instruments)
        {
            <div class="col-6 col-sm-3 p-2" style="min-width: 18rem; max-width: 30.5%;">
                <div class="card text-center">
                    <a href='instrument/@instrument.Id'>
                        <img href=# class="card-img-top pt-2" src="@instrument.Image" alt="Card image cap" style="height:300px; width:auto; max-width: 100%;">
                    </a>
                    <div class="card-body">
                        <h5 class="card-title">@instrument.Title</h5>
                        <h5 class="card-text">Price: $@instrument.Price</h5>
                        <p class="card-text">@instrument.Description</p>
                        <p class="card-text">TYPE: @instrument.TypeName</p>
                        @if(@instrument.AvgMark == 0)
                        {
                            <p class="card-text">No marks yet</p>
                        }
                        else
                        {
                            <p class="card-text">Avarage mark: @instrument.AvgMark</p>
                        }
                        
                        <AuthorizeView>
                            <Authorized>
                                <a href="testinstrument/@instrument.Id" class="btn btn-primary m-1">Enroll for testing</a>

                                @if (context.User.IsInRole("Admin"))
                                {
                                    <button class="btn btn-primary m-1" @onclick="@(() => DeleteGood(@instrument.Id))">Delete</button>
                                    <a href="goodsmanagement/editGood/@instrument.Id" class="btn btn-primary m-1">Edit</a>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    List<InstrumentDTO> all_instruments = null;

    List<InstrumentDTO> instruments = null;
    [Parameter]
    public string Type { get; set; }

    SearchInstrumentsModel searchModel = new SearchInstrumentsModel();

    private async Task DeleteGood(int id)
    {
        var obj = new DeleteGoodModel { Id = id };

        await client.PostJsonAsync("api/Goodsmanagement/deletegood", obj);

        var item = all_instruments.First(i => i.Id == id);

        all_instruments.Remove(item);
        instruments.Remove(item);

        this.StateHasChanged();
    }
    private void Search()
    {
        instruments = all_instruments;
        if(searchModel.Input != "" && searchModel.Input != null)
        {
            instruments = instruments.Where(i => System.Text.RegularExpressions.Regex.IsMatch(i.Title, searchModel.Input, System.Text.RegularExpressions.RegexOptions.IgnoreCase)).ToList();
        }

        if(searchModel.MinPrice != "" && searchModel.MinPrice != null)
        {
            instruments = instruments.Where(i => i.Price >= int.Parse(searchModel.MinPrice)).ToList();
        }

        if(searchModel.MaxPrice != "" && searchModel.MaxPrice != null)
        {
            instruments = instruments.Where(i => i.Price <= int.Parse(searchModel.MaxPrice)).ToList();
        }
        this.StateHasChanged();
    }
    protected override void OnParametersSet()
    {
        RefreshFilter();
        Console.WriteLine(Type);
    }
    
    protected override async Task OnInitializedAsync()
    {
        instruments = await client.GetJsonAsync<List<InstrumentDTO>>("api/Instruments");
        all_instruments = instruments;
    }
    private void RefreshFilter()
    {
        if (!String.IsNullOrWhiteSpace(Type))
        {
            instruments = all_instruments?.Where(i => i.TypeName == Type).ToList();
        }
        else
        {
            instruments = all_instruments;
        }
    }
}
